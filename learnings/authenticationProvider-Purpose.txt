The purpose of AuthenticationProvider in your SecurityConfig and how it connects with the configuration in BeansConfig.

The AuthenticationProvider is responsible for the actual authentication logic in Spring Security.

In SecurityConfig:
private final AuthenticationProvider authenticationProvider;

// Used in SecurityFilterChain configuration
.authenticationProvider(authenticationProvider)

This tells Spring Security to use your custom authentication provider for validating credentials.
It's where you define HOW authentication should happen.


====================================================================================================
====================================================================================================



In BeansConfig:

@Bean
public AuthenticationProvider authenticationProvider() {
    DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
    authProvider.setUserDetailsService(userDetailsService);
    authProvider.setPasswordEncoder(passwordEncoder());
    return authProvider;
}

The authentication process flows like this:

DaoAuthenticationProvider:
DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();

    Implements database-backed authentication
    Uses UserDetailsService to load user data
    Uses PasswordEncoder to verify passwords
    Manages the entire authentication process


====================================================================================================
====================================================================================================

UserDetailsService Integration:
authProvider.setUserDetailsService(userDetailsService);

    Loads user details from your database
    Provides user information like:
        Username
        Encoded password
        Authorities/roles
        Account status (enabled/disabled)

====================================================================================================
====================================================================================================

PasswordEncoder Integration:
authProvider.setPasswordEncoder(passwordEncoder());

Handles password verification
Compares submitted password with stored hash
Uses BCrypt in your case

====================================================================================================
====================================================================================================

Example Authentication Flow: **

In your authentication service/controller
public void authenticate(String username, String password) {
    try {
        Authentication auth = new UsernamePasswordAuthenticationToken(username, password);
        // AuthenticationProvider processes this behind the scenes
        Authentication authenticated = authenticationManager.authenticate(auth);
        // If successful, sets the authentication in security context
        SecurityContextHolder.getContext().setAuthentication(authenticated);
    } catch (AuthenticationException e) {
        // Handle authentication failure
    }
}

====================================================================================================
====================================================================================================
When Used:

During login:
    Client submits credentials
    AuthenticationProvider validates them
    Returns authenticated token if successful


====================================================================================================
====================================================================================================

For password-based authentication:
    Verifies username/password combinations
    Manages password encoding/matching
    Handles authentication failures

====================================================================================================
====================================================================================================

With JWT:
    Used during initial token generation
    Validates credentials before issuing JWT
    Not used for subsequent JWT validation (that's handled by JwtFilter)
