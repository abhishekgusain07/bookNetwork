1. securitycontextholder
    The SecurityContextHolder in this diagram represents a fundamental component of Spring Security that stores authentication and authorization details for the currently authenticated user. Let me explain it in detail:
    SecurityContextHolder Components (as shown in diagram):

    SecurityContext

    Contains the core security information
    Holds authentication details for the current user/request
    Contains three main components:

    Principal: Represents the user identity (typically username)
    Credentials: Password or security tokens
    Authorities: User permissions/roles

Key Points about SecurityContextHolder:

Storage Strategy:
    javaCopy// SecurityContextHolder provides different storage strategies:
    SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_THREADLOCAL);  // Default
    SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);
    SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_GLOBAL);

Common Usage Pattern:
    javaCopy// Getting current user details
    SecurityContext context = SecurityContextHolder.getContext();
    Authentication authentication = context.getAuthentication();
    UserDetails userDetails = (UserDetails) authentication.getPrincipal();

Integration in the Flow (as per diagram):
    After JWT validation via JwtService
    Before reaching the DispatcherServlet
    Stores user details retrieved from UserDetailsService

Example implementation:
    javaCopy@Component
    public class JwtAuthenticationFilter extends OncePerRequestFilter {
        @Override
        protected void doFilterInternal(HttpServletRequest request,
                                      HttpServletResponse response,
                                      FilterChain filterChain) {
            // After JWT validation...
            UserDetails userDetails = userDetailsService.loadUserByUsername(username);

            UsernamePasswordAuthenticationToken authToken =
                new UsernamePasswordAuthenticationToken(
                    userDetails,
                    null,
                    userDetails.getAuthorities()
                );

            // Store in SecurityContextHolder
            SecurityContextHolder.getContext().setAuthentication(authToken);

            filterChain.doFilter(request, response);
        }
    }

Accessing in Controllers:
    javaCopy@RestController
    public class UserController {
        @GetMapping("/current-user")
        public String getCurrentUser() {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            return authentication.getName(); // Get username of current user
        }

        // Using with @PreAuthorize
        @PreAuthorize("hasRole('ADMIN')")
        @GetMapping("/admin-only")
        public String adminOnly() {
            // Only accessible if SecurityContext contains ADMIN authority
            return "Admin content";
        }
    }


The SecurityContextHolder in this architecture:
    - Acts as a thread-local storage for security information
    - Is populated after successful JWT validation
    - Makes user details available throughout the request lifecycle
    - Integrates with Spring Security's authorization mechanisms
    - Provides a way to access current user details anywhere in the application
    - Is automatically cleared after request completion

This is crucial for maintaining security context throughout the request processing chain and enabling proper authorization checks in your controllers and services.